#!/bin/bash

###############################################################################

# Any additional bash terminal bindings (keyboard shortcuts) go here.
# This is called and loaded with .bashrc

###############################################################################

# Create a directory and cd into it
function mkdircd() {
	mkdir -p "$@" && eval cd "\"\$$#\""
}

# Find largest file
function large-files() {
	du -h -x -s -- * | sort -r -h | head -20
}

# Copy command output to system clipboard
function copy() {
	if [[ $(uname) == 'Darwin' ]]; then
		cat | pbcopy
	elif [[ $(uname) == 'Linux' ]]; then
		cat | xclip -selection clipboard
	elif [[ $(uname) == 'Windows' ]]; then
		cat >/dev/clipboard
	else
		echo "ERROR: Copy fail. Unsupported operating system: $(uname)"
	fi
}

###############################################################################

# Select a docker container to start and attach to
function dock-start-attach() {
	local cid
	cid=$(docker ps -a | sed 1d | fzf -1 -q "$1" | awk '{print $1}')

	[ "$cid" != "" ] && docker start "$cid" && docker attach "$cid"
}

# Interactive shell into running container
function dock-attach() {
	local cid
	cid=$(docker ps | sed 1d | fzf -1 -q "$1" | awk '{print $1}')

	docker exec -it "$cid" /bin/bash || docker exec -it "$cid" /bin/sh
}

# Inspect a container
function dock-inspect() {
	local cid
	cid=$(docker ps -a | sed 1d | fzf -1 -q "$1" | awk '{print $1}')

	docker inspect "$cid" | jq || docker inspect "$cid"
}

# Select a running docker container to stop
function dock-stop() {
	local cid
	cid=$(docker ps | sed 1d | fzf -q "$1" | awk '{print $1}')

	[ "$cid" != "" ] && docker stop "$cid"
}

# Select a docker container to remove
function dock-rm() {
	local cid
	cid=$(docker ps -a | sed 1d | fzf -q "$1" | awk '{print $1}')

	[ "$cid" != "" ] && docker rm "$cid"
}

# Select a docker image or images to remove
function dock-rmi() {
	docker images | sed 1d | fzf -q "$1" --no-sort -m --tac | awk '{ print $3 }' | xargs -r docker rmi
}

# Prune system of dangling resources
function dock-prune() {
	docker system prune --force
}

###############################################################################

# git worktree
gwtl() {
	cd "$(git worktree list | fzf | awk '{print $1}')"
}

###############################################################################

# Convert video files (.mov, mp4) to .gif
function video2gif() {
	local input_file="$1"
	local palette_file="palette.png"
	local output_file="${input_file%.*}.gif"

	# Check for file existence
	if [ ! -f "$input_file" ]; then
		printf "File not found: %s\n" "$input_file"
		return 1
	fi

	# Get the duration of the video
	local duration=$(
		ffprobe -v error \
			-show_entries format=duration \
			-of default=noprint_wrappers=1:nokey=1 "$input_file" || return 1
	)

	# Create the gif palette
	ffmpeg -loglevel error \
		-progress - \
		-ss 0 \
		-t "$duration" \
		-i "$input_file" \
		-filter_complex "[0:v] palettegen" "$palette_file" || return 1

	# Create the gif
	ffmpeg -loglevel error \
		-progress - \
		-ss 0 \
		-t "$duration" \
		-i "$input_file" \
		-i "$palette_file" \
		-filter_complex "[0:v] fps=10,scale=1024:-1 [new];[new][1:v] paletteuse" "$output_file" || return 1

	# Clean up the palette file
	rm "$palette_file"

	printf "\nGif created: %s\n" "$output_file"
}

# Speed up mp4 by some percent
change_speed_mp4() {
	input_file="$1"   # Input local file path
	speed_change="$2" # Percentage speed change, either positive or negative

	# Calculate speed factors
	if (($(echo "$speed_change > 0" | bc -l))); then
		suffix="p${speed_change}"
		video_factor=$(echo "1/(1+$speed_change/100)" | bc -l)
		audio_factor=$(echo "1+$speed_change/100" | bc -l)
	else
		suffix="m${speed_change}"
		video_factor=$(echo "1/(1+$speed_change/100)" | bc -l)
		audio_factor=$(echo "1+$speed_change/100" | bc -l)
	fi

	# Generate output filename
	filename="${input_file%.*}"
	output_file="${filename}_speed_${suffix}.mp4"

	echo "Changing video tempo ..."

	ffmpeg -i "$input_file" \
		-filter:v "setpts=${video_factor}*PTS" \
		-filter:a "atempo=${audio_factor}" \
		-v error \
		"$output_file"

	echo
	echo "DONE!"
}

merge_mp4() {
	input_file1="$1" # First input MP4 file
	input_file2="$2" # Second input MP4 file

	# Generate output filename
	output_file="merged_${input_file1%.*}_${input_file2%.*}.mp4"

	echo "Merging videos ..."
	echo "Scale: 1920:1080 - 16/9"

	# This function scales both input videos to a resolution of 1920x1080 with a display aspect ratio of 16:9 before concatenating them
	ffmpeg -i "$input_file1" -i "$input_file2" \
		-filter_complex "[0:v]scale=1920:1080,setdar=16/9[v0];[1:v]scale=1920:1080,setdar=16/9[v1];[v0][0:a][v1][1:a]concat=n=2:v=1:a=1[outv][outa]" \
		-map "[outv]" -map "[outa]" \
		-v error \
		"$output_file"

	echo
	echo "DONE!"
}

###############################################################################

# img2webp - Convert images to WebP format with optional resizing
# Usage: img2webp <image_file> [resize_dimension] [quality] [--delete]
#
# Arguments:
#   image_file       - Input image (jpg, jpeg, png, gif, bmp, tiff, etc.)
#   resize_dimension - Resize width in pixels (e.g., 600, 800, 1200) [optional]
#   quality         - WebP quality (1-100, default: 100) [optional]
#   --delete        - Delete original file after conversion [optional]
img2webp() {
	local input_file=""
	local resize_dim=""
	local quality=100
	local delete_original=false
	# Parse arguments
	while [[ $# -gt 0 ]]; do
		case $1 in
		--delete)
			delete_original=true
			shift
			;;
		*)
			if [[ -z "$input_file" ]]; then
				input_file="$1"
			elif [[ -z "$resize_dim" ]]; then
				resize_dim="$1"
			elif [[ "$quality" == "100" ]]; then
				quality="$1"
			else
				echo "Error: Too many arguments"
				return 1
			fi
			shift
			;;
		esac
	done

	# Check if input file provided
	if [[ -z "$input_file" ]]; then
		echo "Error: No input file provided"
		return 1
	fi

	# Check if input file exists
	if [[ ! -f "$input_file" ]]; then
		echo "Error: File '$input_file' not found"
		return 1
	fi

	# Validate quality parameter
	if ! [[ "$quality" =~ ^[0-9]+$ ]] || [[ "$quality" -lt 1 ]] || [[ "$quality" -gt 100 ]]; then
		echo "Error: Quality must be a number between 1 and 100"
		return 1
	fi

	# Get file extension and base name
	local base_name="${input_file%.*}"
	local output_file="${base_name}.webp"

	# Build ImageMagick command
	local convert_cmd="convert '$input_file'"

	# Add resize parameter if provided
	if [[ -n "$resize_dim" ]]; then
		# Validate resize dimension format (width only)
		if [[ "$resize_dim" =~ ^[0-9]+$ ]]; then
			convert_cmd+=" -resize '$resize_dim'"
		else
			echo "Error: Invalid resize dimension '$resize_dim'"
			echo "Valid format: width in pixels (e.g., 600, 800, 1200)"
			return 1
		fi
	fi

	# Add quality parameter
	convert_cmd+=" -quality $quality '$output_file'"

	echo "Converting: $input_file -> $output_file"
	if [[ -n "$resize_dim" ]]; then
		echo "  Resize: $resize_dim"
	fi
	echo "  Quality: $quality%"

	# Execute conversion
	if eval "$convert_cmd"; then
		echo "✓ Conversion successful"

		# Show file size comparison
		if command -v du &>/dev/null; then
			local original_size=$(du -h "$input_file" | cut -f1)
			local webp_size=$(du -h "$output_file" | cut -f1)
			echo "  Original: $original_size | WebP: $webp_size"
		fi

		# Delete original file if requested
		if [[ "$delete_original" == true ]]; then
			if rm "$input_file"; then
				echo "✓ Original file deleted"
			else
				echo "✗ Failed to delete original file"
				return 1
			fi
		fi
	else
		echo "✗ Conversion failed"
		return 1
	fi
}
